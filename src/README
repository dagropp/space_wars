dgropp




=============================
=      File description     =
=============================
SpaceShipFactory.java - Used by the driver to create all the spaceship objects according to the command line arguments.
SpaceShip.java -        Abstract class containing the API spaceships need to implement for the SpaceWars game.
                        Parent to all custom spaceships.
ShipAggressive.java -   Represents a ship that pursues other ships and tries to fire at them. It will always accelerate,
                        and turn towards the nearest ship. When its angle to the nearest ship is less than 0.21 radians,
                        it will try to fire.
ShipBasher.java -       Represents a ship that attempts to collide with other ships. It will always accelerate, and will
                        constantly turn towards the closest ship. If it gets within a distance of 0.19 units (inclusive)
                        from another ship, it will attempt to turn on its shields.
ShipDrunkard.java -     Represents a ship that its pilot had a tad too much to drink. Performs actions and movements
                        randomly and without any logic.
ShipHuman.java -        Represents a ship that is controlled by the user. The keys are: left-arrow and right-arrow to
                        turn, up-arrow to accelerate, ’d’ to fire a shot, ’s’ to turn on the shield, ’a’ to teleport.
                        There will be at most one human controlled ship in a game.
ShipRunner.java -       Represents a ship that attempts to run away from the fight. It will always accelerate, and will
                        constantly turn away from the closest ship. If the nearest ship is closer than 0.25 units, and
                        if its angle to the Runner is less than 0.23 radians, the Runner feels threatened and will
                        attempt to teleport.
ShipSpecial.java -      Represents a ship that has a unique behavior: it is a bully, picking on the weakest ships. Each
                        game it checks which is the weakest and most coward ship out there by this order (from weakest
                        to strongest): Runner, Drunkard, Human, Basher, Aggressive, Special. Thereafter, it assigns it
                        as its target and attempts to bash and shoot it. It has unlimited teleporting abilities, and if
                        the closest ship is not the target, it will teleport until found.
Image files -           avocado_default.png - avocado_shield.png - cyan_default.png - cyan_shield.png -
                        earth_default.png - earth_shield.png - grey_default.png - grey_shield.png -
                        magenta_default.png - magenta_shield.png - violet_default.png - violet_shield.png



=============================
=          Design           =
=============================
- Inheritance -
    We were asked to create 6 different SpaceShips, each with different behaviour. Despite the differences, most ships
    share many common qualities - if not with all other ships, then with some. I decided to make this class parent to
    all other SpaceShip classes. This class holds all SpaceShip methods that are shared by custom SpaceShips,
    and later if any modifications are needed, some methods will be overridden. Upon construction, the only difference
    between the classes is the image path given (except for ShipSpecial that is assigned a target).
- Abstraction -
    It was clear that there should be no "general" SpaceShip, so this class is not supposed to be initiated. But, as
    explained above this class holds general methods that apply to all SpaceShips, so I decided to make it abstract.
    Also, the main (but not only) difference between custom SpaceShips is how, when, why and which actions to perform.
    To deal with it, I defined an abstract method in SpaceShip that is to be implemented in each child class in itself.
- Extensibility -
    As explained above, by defining general actions and behaviours in SpaceShip parent abstract class, each custom
    SpaceShip class holds the unique behaviours and actions of this spaceship. Thus, if one wanted to update general
    actions and behaviours, it should be done in SpaceShip class, and updating unique actions and behaviours should be
    done in the child classes.
- Modularity -
    As explained above, each special ship has a distinct class extending the general SpaceShip class. Also, in all
    classes, each action/test/calculation is done with its own (usually private) method. All relevant info (numbers,
    paths, etc.) are held as private class constants, thus it's easier to update and understand them.
- Minimal API -
    All classes members are private. All methods that were not pre-defined in the given API are private when optional
    (helper methods and methods to be used by child class), and protected when necessary to share between SpaceShip and
    its children (setters, getters, etc.).



=============================
=  Implementation details   =
=============================
- boost/reduce energy/health -
    In order to not go over the limitation levels, I defined dedicated private methods to handle boosts and reductions
    in energy and health.
- doAction() method -
    This method holds the main difference between the custom ships, as explained above. There are some actions that all
    SpaceShips share and then actions that are more unique. To deal with that, I split the method to 2 - 1 in SpaceShip
    class, dealing with shared actions, and then it calls a unique method that is defined as abstract and implemented
    in each class on its own.
- Distance, angle and direction finding methods -
    Most computer handled SpaceShips (except for Drunkard) are basing their actions on the proximity and angle of the
    closest ship. Some are running towards it, some from it. The logic of it is basically the same, therefore I defined
    all these relevant methods in the parent class, and each child uses these methods with some tweaks.
- ShipDrunkard actions -
    I have decided to treat the Drunkard ship like the human handled ship, were each button click triggers an action.
    But, instead of responding to buttons, the Drunkard calls a method that returns random boolean value, that uses
    rounded value of Math.random. Thus, the ship decisions on which way to go and which actions to perform is
    completely random and unexpected. The energy/health consequences of the drunkard ship's actions, are the same as
    all other ships - like in the real world...
- ShipSpecial - finding the target -
    This ship's unique behaviour as explained above, is to bully the weakest ship type out on the game. To gather which
    ships participate in current game, this class receives the args passed in the command line in SpaceShipFactory, and
    then analyze them in order to get find he weakest available ship as specified in the decided hierarchy.
- ShipSpecial - picking on the target -
    After defining the target, the ship checks the type of the closest ship. If the type doesn't match the target class,
    it teleports until found. To avoid delays in teleportations, this ship (and only this ship) overrides the teleport
    method, and doesn't reduce its energy, but can teleport only every 10 rounds. (We were told it's OK to bend game
    rules for the special ship).



=============================
=    Answers to questions   =
=============================
No questions for this exercise.
